setwd(
file.path(
"/media"
, "latex"
, "Profiles"
, "MYaseen208"
, "Muhammad_Yaseen"
, "Consultancy_at_UAF"
, "Mr._M._Yaseen"
, "R_Packages"
, "PakPC2017"
, "PakPC2017"
)
)
setwd(
file.path(
"/media"
, "latex"
, "Profiles"
, "MYaseen208"
, "Muhammad_Yaseen"
, "Consultancy_at_UAF"
, "Mr._M._Yaseen"
, "R_Packages"
, "PakPC2017"
, "PakPC2017"
)
)
getwd()
setwd(
file.path(
"/media"
, "latex"
, "Profiles"
, "MYaseen208"
, "Muhammad_Yaseen"
, "Consultancy_at_UAF"
, "Mr._M._Yaseen"
, "R_Packages"
, "PakPC2017"
, "PakPC2017"
)
)
getwd()
install.packages("devtools")
library(devtools)
devtools::load_all()
library(PakPC2017GUI)
?PakPC2017GUI
PakPC2017GUI()
load("/home/yaseen/Desktop/QCSimBoot/RepCpAvgWidthCovProb.RData")
View(RepCpAvgWidthCovProb)
library(stability)
?add_anova
data(ge_data)
Yield.Effects <- ge_effects(
.data = ge_data
, y    = Yield
, geno = Gen
, env  = Env
)
names(Yield.Effects)
ge_effects.default <-
function(.data, y, geno, env){
Y   <- deparse(substitute(y))
G   <- deparse(substitute(geno))
E   <- deparse(substitute(env))
ge_means <- tapply(.data$Y, list(.data$G, .data$E), mean)
gge_effects <-
sweep(
x      = ge_means
, MARGIN = 2
, STATS  = colMeans(ge_means)
)
ge_effects <-
sweep(
x      = gge_effects
, MARGIN = 1
, STATS  = rowMeans(gge_effects)
)
return(list(
"ge_means"    = ge_means
, "ge_effects"  = ge_effects
, "gge_effects" = gge_effects
))
}
data(ge_data)
Yield.Effects <- ge_effects(
.data = ge_data
, y    = Yield
, geno = Gen
, env  = Env
)
names(Yield.Effects)
Yield.Effects$ge_means
?spread
ge_effects.default <-
function(.data, y, geno, env){
y    <- enquo(y)
geno <- enquo(geno)
env  <- enquo(env)
ge_means <- .data %>%
dplyr::group_by(!!geno, !!env) %>%
dplyr::summarize(Mean  = mean(!!y)) %>%
tidyr::spread(key = env, value = Mean)
# Y   <- deparse(substitute(y))
# G   <- deparse(substitute(geno))
# E   <- deparse(substitute(env))
#
# ge_means <- tapply(.data$Y, list(.data$G, .data$E), mean)
gge_effects <-
sweep(
x      = ge_means
, MARGIN = 2
, STATS  = colMeans(ge_means)
)
ge_effects <-
sweep(
x      = gge_effects
, MARGIN = 1
, STATS  = rowMeans(gge_effects)
)
return(list(
"ge_means"    = ge_means
, "ge_effects"  = ge_effects
, "gge_effects" = gge_effects
))
}
data(ge_data)
Yield.Effects <- ge_effects(
.data = ge_data
, y    = Yield
, geno = Gen
, env  = Env
)
names(Yield.Effects)
Yield.Effects
devtools::load_all()
library(stability)
example("fox")
df2 <- ge_data
df2 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Yield))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(
Mean = mean(Yield)
,  TOP = sum(Rank >= 3)
)
library(dplyr)
library(magrittr)
df2 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Yield))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(
Mean = mean(Yield)
,  TOP = sum(Rank >= 3)
)
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y)))
set.seed(12345)
Y   <- ceiling(rnorm(n= 50, mean = 100, sd = 10))
Env <- paste0("E", rep(1:10, each = 5))
Gen <- paste0("G", rep(1:5, times = 10))
df1 <- data.frame(Env, Gen, Y)
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y)))
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y))) %>% as.data.frame()
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(TOP = sum(Rank >= 3))
4+5+6+3+9
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y))) %>%
dplyr::arrange(Gen) %>%
as.data.frame()
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y))) %>%
dplyr::arrange(Gen, Rank) %>%
as.data.frame()
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(TOP = sum(Rank >= 3))
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(TOP = sum(Rank <= 3))
df2 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Yield))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(
Mean = mean(Yield)
,  TOP = sum(Rank <= 3)
)
df2 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = rank(desc(Yield)))
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = rank(desc(Y))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(TOP = sum(Rank <= 3))
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = rank(desc(Y)))
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = rank(desc(Y))) %>%
dplyr::arrange(Gen, Rank) %>%
as.data.frame()
fox
?rank
df1 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Y))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(TOP = sum(Rank <= 3))
df2 %>%
dplyr::group_by(Env) %>%
dplyr::mutate(Rank = min_rank(desc(Yield))) %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(
Mean = mean(Yield)
,  TOP = sum(Rank <= 3)
)
#' @name    fox
#' @aliases fox
#' @title Additive ANOVA for Genotypes by Environment Interaction (GEI) model
#' @description Additive ANOVA for Genotypes by Environment Interaction (GEI) model
#'
#' @param .data  data.frame
#' @param .y     Response Variable
#' @param .rep   Replication Factor
#' @param .gen   Genotypes Factor
#' @param .env   Environment Factor
#'
#' @return Additive ANOVA
#'
#' @author
#' Muhammad Yaseen (\email{myaseen208@@gmail.com})
#'
#' @references
#'  Singh, R. K. and Chaudhary, B. D. (2004) \emph{Biometrical Methods in Quantitative Genetic Analysis}.
#'              New Delhi: Kalyani.
#'
#' @import rlang
#' @importFrom stats anova as.formula ave coef confint lm pf terms
#'
#' @export
#'
#' @examples
#' data(ge_data)
#' YieldFox <-
#'      fox(
#'             .data = ge_data
#'           , .y    = Yield
#'           , .rep  = Rep
#'           , .gen  = Gen
#'           , .env  = Env
#'       )
#' YieldFox
#'
fox <- function(.data, .y, .rep, .gen, .env) {
UseMethod("fox")
}
#' @export
#' @rdname fox
fox.default <-
function(.data, .y, .rep, .gen, .env){
Y   <- enquo(.y)
Rep <- enquo(.rep)
G   <- enquo(.gen)
E   <- enquo(.env)
g <- length(levels(.data$G))
e <- length(levels(.data$E))
r <- length(levels(.data$Rep))
foxOut <-
.data %>%
dplyr::group_by(!! E) %>%
dplyr::mutate(GRank = min_rank(desc(!! Y))) %>%
dplyr::group_by(!! G) %>%
dplyr::summarise(
Mean = mean()
,  TOP  = sum(GRank <= 3)
)
return(list(
Fox = foxOut
))
}
YieldFox <-
fox(
.data = ge_data
, .y    = Yield
, .rep  = Rep
, .gen  = Gen
, .env  = Env
)
YieldFox
#' @name    fox
#' @aliases fox
#' @title Additive ANOVA for Genotypes by Environment Interaction (GEI) model
#' @description Additive ANOVA for Genotypes by Environment Interaction (GEI) model
#'
#' @param .data  data.frame
#' @param .y     Response Variable
#' @param .rep   Replication Factor
#' @param .gen   Genotypes Factor
#' @param .env   Environment Factor
#'
#' @return Additive ANOVA
#'
#' @author
#' Muhammad Yaseen (\email{myaseen208@@gmail.com})
#'
#' @references
#'  Singh, R. K. and Chaudhary, B. D. (2004) \emph{Biometrical Methods in Quantitative Genetic Analysis}.
#'              New Delhi: Kalyani.
#'
#' @import rlang
#' @importFrom stats anova as.formula ave coef confint lm pf terms
#'
#' @export
#'
#' @examples
#' data(ge_data)
#' YieldFox <-
#'      fox(
#'             .data = ge_data
#'           , .y    = Yield
#'           , .rep  = Rep
#'           , .gen  = Gen
#'           , .env  = Env
#'       )
#' YieldFox
#'
fox <- function(.data, .y, .rep, .gen, .env) {
UseMethod("fox")
}
#' @export
#' @rdname fox
fox.default <-
function(.data, .y, .rep, .gen, .env){
Y   <- enquo(.y)
Rep <- enquo(.rep)
G   <- enquo(.gen)
E   <- enquo(.env)
g <- length(levels(.data$G))
e <- length(levels(.data$E))
r <- length(levels(.data$Rep))
foxOut <-
.data %>%
dplyr::group_by(!! E) %>%
dplyr::mutate(GRank = min_rank(desc(!! Y))) %>%
dplyr::group_by(!! G) %>%
dplyr::summarise(
Mean = mean(!! Y)
,  TOP  = sum(GRank <= 3)
)
return(list(
Fox = foxOut
))
}
YieldFox <-
fox(
.data = ge_data
, .y    = Yield
, .rep  = Rep
, .gen  = Gen
, .env  = Env
)
YieldFox
rm(list = ls())
setwd("/media/yaseen/Documents/MYaseen208/Consultancy_at_UAF/Mr._M._Yaseen/2017-09-14RPackages/stability/stability")
getwd()
library(devtools)
devtools::load_all()
# usethis::use_testthat()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
# devtools::test()
devtools::check()
library(stability)
data("ge_data")
df1 <- ge_data
str(df1)
library(dplyr)
library(magrittr)
ge_means(
.data  = df1
, .y    = Yield
, .gen  = Gen
, .env  = Env
)
ge_means(
.data  = df1
, .y    = Yield
, .gen  = Gen
, .env  = Env
)$g_means
ge_effects(
.data  = df1
, .y    = Yield
, .gen  = Gen
, .env  = Env
)
ge_effects(
.data  = df1
, .y    = Yield
, .gen  = Gen
, .env  = Env
)$ge_effects
nrow(GE.Effs)
GE.Effs <-
ge_effects(
.data  = df1
, .y    = Yield
, .gen  = Gen
, .env  = Env
)$ge_effects
nrow(GE.Effs)
ncol(GE.Effs)
g <- nrow(GE.Effs)
e <- ncol(GE.Effs)
GE.Effs %>%
dplyr::group_by(Gen) %>%
dplyr::summarise(
Wi= sum(GE.Effs^2)
)
GE.Effs
GE.Effs %*% t(GE.Effs)
GE.Effs %*% t(GE.Effs)
diag(GE.Effs %*% t(GE.Effs))
as.matrix(diag(GE.Effs %*% t(GE.Effs)))
as.matrix(Wi = diag(GE.Effs %*% t(GE.Effs)))
Wi <- as.matrix(diag(GE.Effs %*% t(GE.Effs)))
colnames(Wi)
colnames(Wi) <- "Wi"
Wi
g*(g-1)*Wi
sum(Wi)
(g*(g-1)*Wi - sum(Wi))/((e-1)*(g-1)*(g-2))
2943754/3
2943754/2
2943754/946707.1
ShuklaVar <- (g*(g-1)*Wi - sum(Wi))/((e-1)*(g-1)*(g-2))
ShuklaVar
colnames(ShuklaVar) <- "ShuklaVar"
ShuklaVar
tibble::as_tibble(GMeans, ShuklaVar)
GMeans <-
ge_means(
.data  = df1
, .y    = Yield
, .gen  = Gen
, .env  = Env
)$g_means
tibble::as_tibble(GMeans, ShuklaVar)
ShuklaVar
c(GMeans, ShuklaVar)
tibble::as_tibble(data.frame(GMeans, ShuklaVar))
Kang <- tibble::as_tibble(data.frame(GMeans, ShuklaVar))
tibble::as_tibble(data.frame(GMeans, ShuklaVar)) %>%
dplyr::mutate(
rMean     = min_rank(desc(G.Mean))
, rShukaVar = min_rank(ShuklaVar)
)
tibble::as_tibble(data.frame(GMeans, ShuklaVar)) %>%
dplyr::mutate(
rMean     = min_rank(desc(G.Mean))
, rShukaVar = min_rank(ShuklaVar)
, rStab     = rMean + rShukaVar
)
rm(list = ls())
setwd("/media/yaseen/Documents/MYaseen208/Consultancy_at_UAF/Mr._M._Yaseen/2017-09-14RPackages/stability/stability")
getwd()
library(devtools)
devtools::load_all()
library(devtools)
devtools::load_all()
# usethis::use_testthat()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
# devtools::test()
devtools::check()
